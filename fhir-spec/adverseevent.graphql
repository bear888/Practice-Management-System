# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IAdverseEvent implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  actuality: code  _actuality: ElementBase
  category: [CodeableConcept]
  code: CodeableConcept
  subject: Reference!
  encounter: Reference
  causeDateTime: dateTime  _causeDateTime: ElementBase
  causePeriod: Period
  effectDateTime: dateTime  _effectDateTime: ElementBase
  effectPeriod: Period
  detected: dateTime  _detected: ElementBase
  recordedDate: dateTime  _recordedDate: ElementBase
  resultingEffect: [CodeableReference]
  location: Reference
  seriousness: CodeableConcept
  outcome: [CodeableConcept]
  recorder: Reference
  participant: [AdverseEventParticipant]
  study: [Reference]
  expectedInResearchStudy: Boolean  _expectedInResearchStudy: ElementBase
  suspectEntity: [AdverseEventSuspectEntity]
  contributingFactor: [CodeableReference]
  preventiveAction: [CodeableReference]
  mitigatingAction: [CodeableReference]
  supportingInfo: [CodeableReference]
  note: [Annotation]
}

type AdverseEvent implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  actuality: code  _actuality: ElementBase
  category: [CodeableConcept]
  code: CodeableConcept
  subject: Reference!
  encounter: Reference
  causeDateTime: dateTime  _causeDateTime: ElementBase
  causePeriod: Period
  effectDateTime: dateTime  _effectDateTime: ElementBase
  effectPeriod: Period
  detected: dateTime  _detected: ElementBase
  recordedDate: dateTime  _recordedDate: ElementBase
  resultingEffect: [CodeableReference]
  location: Reference
  seriousness: CodeableConcept
  outcome: [CodeableConcept]
  recorder: Reference
  participant: [AdverseEventParticipant]
  study: [Reference]
  expectedInResearchStudy: Boolean  _expectedInResearchStudy: ElementBase
  suspectEntity: [AdverseEventSuspectEntity]
  contributingFactor: [CodeableReference]
  preventiveAction: [CodeableReference]
  mitigatingAction: [CodeableReference]
  supportingInfo: [CodeableReference]
  note: [Annotation]
}

type AdverseEventParticipant {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  function: CodeableConcept
  actor: Reference!
}

type AdverseEventSuspectEntity {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  instance: CodeableReference!
  causality: AdverseEventSuspectEntityCausality
}

type AdverseEventSuspectEntityCausality {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  assessmentMethod: CodeableConcept
  entityRelatedness: CodeableConcept
  author: Reference
}

input AdverseEventInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  status: code  _status: ElementBaseInput
  actuality: code  _actuality: ElementBaseInput
  category: [CodeableConceptInput]
  code: CodeableConceptInput
  subject: ReferenceInput!
  encounter: ReferenceInput
  causeDateTime: dateTime  _causeDateTime: ElementBaseInput
  causePeriod: PeriodInput
  effectDateTime: dateTime  _effectDateTime: ElementBaseInput
  effectPeriod: PeriodInput
  detected: dateTime  _detected: ElementBaseInput
  recordedDate: dateTime  _recordedDate: ElementBaseInput
  resultingEffect: [CodeableReferenceInput]
  location: ReferenceInput
  seriousness: CodeableConceptInput
  outcome: [CodeableConceptInput]
  recorder: ReferenceInput
  participant: [AdverseEventParticipantInputInput]
  study: [ReferenceInput]
  expectedInResearchStudy: Boolean  _expectedInResearchStudy: ElementBaseInput
  suspectEntity: [AdverseEventSuspectEntityInputInput]
  contributingFactor: [CodeableReferenceInput]
  preventiveAction: [CodeableReferenceInput]
  mitigatingAction: [CodeableReferenceInput]
  supportingInfo: [CodeableReferenceInput]
  note: [AnnotationInput]
}

input AdverseEventParticipantInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  function: CodeableConceptInput
  actor: ReferenceInput!
}

input AdverseEventSuspectEntityInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  instance: CodeableReferenceInput!
  causality: AdverseEventSuspectEntityInputCausalityInputInput
}

input AdverseEventSuspectEntityInputCausalityInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  assessmentMethod: CodeableConceptInput
  entityRelatedness: CodeableConceptInput
  author: ReferenceInput
}

type AdverseEventReadType {
  AdverseEvent(id: ID!): AdverseEvent
}

type AdverseEventListType {
  AdverseEventList(_filter: String
    actuality: [token]
    category: [token]
    cause: [date]
    code: [token]
    effect: [date]
    identifier: [token]
    location: [reference]
    patient: [reference]
    recorder: [reference]
    resultingeffect_code: [token]
    resultingeffect_reference: [reference]
    seriousness: [token]
    status: [token]
    study: [reference]
    subject: [reference]
    substance: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [AdverseEvent]
}

type AdverseEventConnectionType {
  AdverseEventConection(_filter: String
    actuality: [token]
    category: [token]
    cause: [date]
    code: [token]
    effect: [date]
    identifier: [token]
    location: [reference]
    patient: [reference]
    recorder: [reference]
    resultingeffect_code: [token]
    resultingeffect_reference: [reference]
    seriousness: [token]
    status: [token]
    study: [reference]
    subject: [reference]
    substance: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): AdverseEventConnection
}

type AdverseEventConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [AdverseEventEdge]
}

type AdverseEventEdge {
  mode: String
  score: Float
  resource: AdverseEvent
}

type AdverseEventCreateType {
  AdverseEventCreate(resource: AdverseEventInput): AdverseEventCreation
}

type AdverseEventCreation {
  location: String
  resource: AdverseEvent
  information: OperationOutcome
}

type AdverseEventUpdateType {
  AdverseEventUpdate(id: ID, resource: AdverseEventInput): AdverseEventUpdate
}

type AdverseEventUpdate {
  resource: AdverseEvent
  information: OperationOutcome
}

type AdverseEventDeleteType {
  AdverseEventDelete(id: ID): AdverseEventDelete
}

type AdverseEventDelete {
  information: OperationOutcome
}

