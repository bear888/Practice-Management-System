# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IClinicalAssessment implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  statusReason: CodeableConcept
  description: String  _description: ElementBase
  subject: Reference!
  encounter: Reference
  effectiveDateTime: dateTime  _effectiveDateTime: ElementBase
  effectivePeriod: Period
  date: dateTime  _date: ElementBase
  performer: Reference
  previous: Reference
  problem: [Reference]
  changePattern: CodeableConcept
  protocol: [uri]  _protocol: [ElementBase]
  summary: markdown  _summary: ElementBase
  finding: [ClinicalAssessmentFinding]
  prognosisCodeableConcept: [CodeableConcept]
  prognosisReference: [Reference]
  supportingInfo: [Reference]
  note: [Annotation]
}

type ClinicalAssessment implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  statusReason: CodeableConcept
  description: String  _description: ElementBase
  subject: Reference!
  encounter: Reference
  effectiveDateTime: dateTime  _effectiveDateTime: ElementBase
  effectivePeriod: Period
  date: dateTime  _date: ElementBase
  performer: Reference
  previous: Reference
  problem: [Reference]
  changePattern: CodeableConcept
  protocol: [uri]  _protocol: [ElementBase]
  summary: markdown  _summary: ElementBase
  finding: [ClinicalAssessmentFinding]
  prognosisCodeableConcept: [CodeableConcept]
  prognosisReference: [Reference]
  supportingInfo: [Reference]
  note: [Annotation]
}

type ClinicalAssessmentFinding {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  item: CodeableReference
  basis: String  _basis: ElementBase
}

input ClinicalAssessmentInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  status: code  _status: ElementBaseInput
  statusReason: CodeableConceptInput
  description: String  _description: ElementBaseInput
  subject: ReferenceInput!
  encounter: ReferenceInput
  effectiveDateTime: dateTime  _effectiveDateTime: ElementBaseInput
  effectivePeriod: PeriodInput
  date: dateTime  _date: ElementBaseInput
  performer: ReferenceInput
  previous: ReferenceInput
  problem: [ReferenceInput]
  changePattern: CodeableConceptInput
  protocol: [uri]  _protocol: [ElementBaseInput]
  summary: markdown  _summary: ElementBaseInput
  finding: [ClinicalAssessmentFindingInputInput]
  prognosisCodeableConcept: [CodeableConceptInput]
  prognosisReference: [ReferenceInput]
  supportingInfo: [ReferenceInput]
  note: [AnnotationInput]
}

input ClinicalAssessmentFindingInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  item: CodeableReferenceInput
  basis: String  _basis: ElementBaseInput
}

type ClinicalAssessmentReadType {
  ClinicalAssessment(id: ID!): ClinicalAssessment
}

type ClinicalAssessmentListType {
  ClinicalAssessmentList(_filter: String
    date: [date]
    encounter: [reference]
    finding_code: [token]
    finding_ref: [reference]
    identifier: [token]
    patient: [reference]
    performer: [reference]
    previous: [reference]
    problem: [reference]
    status: [token]
    subject: [reference]
    supporting_info: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [ClinicalAssessment]
}

type ClinicalAssessmentConnectionType {
  ClinicalAssessmentConection(_filter: String
    date: [date]
    encounter: [reference]
    finding_code: [token]
    finding_ref: [reference]
    identifier: [token]
    patient: [reference]
    performer: [reference]
    previous: [reference]
    problem: [reference]
    status: [token]
    subject: [reference]
    supporting_info: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): ClinicalAssessmentConnection
}

type ClinicalAssessmentConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [ClinicalAssessmentEdge]
}

type ClinicalAssessmentEdge {
  mode: String
  score: Float
  resource: ClinicalAssessment
}

type ClinicalAssessmentCreateType {
  ClinicalAssessmentCreate(resource: ClinicalAssessmentInput): ClinicalAssessmentCreation
}

type ClinicalAssessmentCreation {
  location: String
  resource: ClinicalAssessment
  information: OperationOutcome
}

type ClinicalAssessmentUpdateType {
  ClinicalAssessmentUpdate(id: ID, resource: ClinicalAssessmentInput): ClinicalAssessmentUpdate
}

type ClinicalAssessmentUpdate {
  resource: ClinicalAssessment
  information: OperationOutcome
}

type ClinicalAssessmentDeleteType {
  ClinicalAssessmentDelete(id: ID): ClinicalAssessmentDelete
}

type ClinicalAssessmentDelete {
  information: OperationOutcome
}

