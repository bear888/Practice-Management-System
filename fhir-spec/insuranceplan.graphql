# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IInsurancePlan implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  type: CodeableConcept
  product: Reference
  coverageArea: [Reference]
  network: [Reference]
  generalCost: [InsurancePlanGeneralCost]
  specificCost: [InsurancePlanSpecificCost]
}

type InsurancePlan implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  type: CodeableConcept
  product: Reference
  coverageArea: [Reference]
  network: [Reference]
  generalCost: [InsurancePlanGeneralCost]
  specificCost: [InsurancePlanSpecificCost]
}

type InsurancePlanGeneralCost {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  groupSize: positiveInt  _groupSize: ElementBase
  cost: Money
  comment: String  _comment: ElementBase
}

type InsurancePlanSpecificCost {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  category: CodeableConcept!
  benefit: [InsurancePlanSpecificCostBenefit]
}

type InsurancePlanSpecificCostBenefit {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept!
  cost: [InsurancePlanSpecificCostBenefitCost]
}

type InsurancePlanSpecificCostBenefitCost {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept!
  applicability: CodeableConcept
  qualifier: [CodeableConcept]
  value: Quantity
}

input InsurancePlanInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  type: CodeableConceptInput
  product: ReferenceInput
  coverageArea: [ReferenceInput]
  network: [ReferenceInput]
  generalCost: [InsurancePlanGeneralCostInputInput]
  specificCost: [InsurancePlanSpecificCostInputInput]
}

input InsurancePlanGeneralCostInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput
  groupSize: positiveInt  _groupSize: ElementBaseInput
  cost: MoneyInput
  comment: String  _comment: ElementBaseInput
}

input InsurancePlanSpecificCostInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  category: CodeableConceptInput!
  benefit: [InsurancePlanSpecificCostInputBenefitInputInput]
}

input InsurancePlanSpecificCostInputBenefitInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput!
  cost: [InsurancePlanSpecificCostInputBenefitInputCostInputInput]
}

input InsurancePlanSpecificCostInputBenefitInputCostInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput!
  applicability: CodeableConceptInput
  qualifier: [CodeableConceptInput]
  value: QuantityInput
}

type InsurancePlanReadType {
  InsurancePlan(id: ID!): InsurancePlan
}

type InsurancePlanListType {
  InsurancePlanList(_filter: String
    coverage_area: [reference]
    identifier: [token]
    network: [reference]
    product: [reference]
    type: [token]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [InsurancePlan]
}

type InsurancePlanConnectionType {
  InsurancePlanConection(_filter: String
    coverage_area: [reference]
    identifier: [token]
    network: [reference]
    product: [reference]
    type: [token]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): InsurancePlanConnection
}

type InsurancePlanConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [InsurancePlanEdge]
}

type InsurancePlanEdge {
  mode: String
  score: Float
  resource: InsurancePlan
}

type InsurancePlanCreateType {
  InsurancePlanCreate(resource: InsurancePlanInput): InsurancePlanCreation
}

type InsurancePlanCreation {
  location: String
  resource: InsurancePlan
  information: OperationOutcome
}

type InsurancePlanUpdateType {
  InsurancePlanUpdate(id: ID, resource: InsurancePlanInput): InsurancePlanUpdate
}

type InsurancePlanUpdate {
  resource: InsurancePlan
  information: OperationOutcome
}

type InsurancePlanDeleteType {
  InsurancePlanDelete(id: ID): InsurancePlanDelete
}

type InsurancePlanDelete {
  information: OperationOutcome
}

