# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IDeviceDispense implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: [Reference]
  partOf: [Reference]
  status: code  _status: ElementBase
  statusReason: CodeableReference
  category: [CodeableConcept]
  device: CodeableReference!
  subject: Reference!
  receiver: Reference
  encounter: Reference
  supportingInformation: [Reference]
  performer: [DeviceDispensePerformer]
  location: Reference
  type: CodeableConcept
  quantity: Quantity
  preparedDate: dateTime  _preparedDate: ElementBase
  whenHandedOver: dateTime  _whenHandedOver: ElementBase
  destination: Reference
  note: [Annotation]
  usageInstruction: markdown  _usageInstruction: ElementBase
  eventHistory: [Reference]
}

type DeviceDispense implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: [Reference]
  partOf: [Reference]
  status: code  _status: ElementBase
  statusReason: CodeableReference
  category: [CodeableConcept]
  device: CodeableReference!
  subject: Reference!
  receiver: Reference
  encounter: Reference
  supportingInformation: [Reference]
  performer: [DeviceDispensePerformer]
  location: Reference
  type: CodeableConcept
  quantity: Quantity
  preparedDate: dateTime  _preparedDate: ElementBase
  whenHandedOver: dateTime  _whenHandedOver: ElementBase
  destination: Reference
  note: [Annotation]
  usageInstruction: markdown  _usageInstruction: ElementBase
  eventHistory: [Reference]
}

type DeviceDispensePerformer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  function: CodeableConcept
  actor: Reference!
}

input DeviceDispenseInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  basedOn: [ReferenceInput]
  partOf: [ReferenceInput]
  status: code  _status: ElementBaseInput
  statusReason: CodeableReferenceInput
  category: [CodeableConceptInput]
  device: CodeableReferenceInput!
  subject: ReferenceInput!
  receiver: ReferenceInput
  encounter: ReferenceInput
  supportingInformation: [ReferenceInput]
  performer: [DeviceDispensePerformerInputInput]
  location: ReferenceInput
  type: CodeableConceptInput
  quantity: QuantityInput
  preparedDate: dateTime  _preparedDate: ElementBaseInput
  whenHandedOver: dateTime  _whenHandedOver: ElementBaseInput
  destination: ReferenceInput
  note: [AnnotationInput]
  usageInstruction: markdown  _usageInstruction: ElementBaseInput
  eventHistory: [ReferenceInput]
}

input DeviceDispensePerformerInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  function: CodeableConceptInput
  actor: ReferenceInput!
}

type DeviceDispenseReadType {
  DeviceDispense(id: ID!): DeviceDispense
}

type DeviceDispenseListType {
  DeviceDispenseList(_filter: String
    code: [token]
    identifier: [token]
    patient: [reference]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [DeviceDispense]
}

type DeviceDispenseConnectionType {
  DeviceDispenseConection(_filter: String
    code: [token]
    identifier: [token]
    patient: [reference]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): DeviceDispenseConnection
}

type DeviceDispenseConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [DeviceDispenseEdge]
}

type DeviceDispenseEdge {
  mode: String
  score: Float
  resource: DeviceDispense
}

type DeviceDispenseCreateType {
  DeviceDispenseCreate(resource: DeviceDispenseInput): DeviceDispenseCreation
}

type DeviceDispenseCreation {
  location: String
  resource: DeviceDispense
  information: OperationOutcome
}

type DeviceDispenseUpdateType {
  DeviceDispenseUpdate(id: ID, resource: DeviceDispenseInput): DeviceDispenseUpdate
}

type DeviceDispenseUpdate {
  resource: DeviceDispense
  information: OperationOutcome
}

type DeviceDispenseDeleteType {
  DeviceDispenseDelete(id: ID): DeviceDispenseDelete
}

type DeviceDispenseDelete {
  information: OperationOutcome
}

