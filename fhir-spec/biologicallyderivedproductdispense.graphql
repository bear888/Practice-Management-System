# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IBiologicallyDerivedProductDispense implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: [Reference]
  partOf: [Reference]
  status: code  _status: ElementBase
  originRelationshipType: CodeableConcept
  product: Reference!
  subject: Reference!
  matchStatus: CodeableConcept
  performer: [BiologicallyDerivedProductDispensePerformer]
  location: Reference
  quantity: Quantity
  preparedDate: dateTime  _preparedDate: ElementBase
  whenHandedOver: dateTime  _whenHandedOver: ElementBase
  destination: Reference
  note: [Annotation]
  usageInstruction: String  _usageInstruction: ElementBase
}

type BiologicallyDerivedProductDispense implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  basedOn: [Reference]
  partOf: [Reference]
  status: code  _status: ElementBase
  originRelationshipType: CodeableConcept
  product: Reference!
  subject: Reference!
  matchStatus: CodeableConcept
  performer: [BiologicallyDerivedProductDispensePerformer]
  location: Reference
  quantity: Quantity
  preparedDate: dateTime  _preparedDate: ElementBase
  whenHandedOver: dateTime  _whenHandedOver: ElementBase
  destination: Reference
  note: [Annotation]
  usageInstruction: String  _usageInstruction: ElementBase
}

type BiologicallyDerivedProductDispensePerformer {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  function: CodeableConcept
  actor: Reference!
}

input BiologicallyDerivedProductDispenseInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  basedOn: [ReferenceInput]
  partOf: [ReferenceInput]
  status: code  _status: ElementBaseInput
  originRelationshipType: CodeableConceptInput
  product: ReferenceInput!
  subject: ReferenceInput!
  matchStatus: CodeableConceptInput
  performer: [BiologicallyDerivedProductDispensePerformerInputInput]
  location: ReferenceInput
  quantity: QuantityInput
  preparedDate: dateTime  _preparedDate: ElementBaseInput
  whenHandedOver: dateTime  _whenHandedOver: ElementBaseInput
  destination: ReferenceInput
  note: [AnnotationInput]
  usageInstruction: String  _usageInstruction: ElementBaseInput
}

input BiologicallyDerivedProductDispensePerformerInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  function: CodeableConceptInput
  actor: ReferenceInput!
}

type BiologicallyDerivedProductDispenseReadType {
  BiologicallyDerivedProductDispense(id: ID!): BiologicallyDerivedProductDispense
}

type BiologicallyDerivedProductDispenseListType {
  BiologicallyDerivedProductDispenseList(_filter: String
    identifier: [token]
    patient: [reference]
    performer: [reference]
    product: [reference]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [BiologicallyDerivedProductDispense]
}

type BiologicallyDerivedProductDispenseConnectionType {
  BiologicallyDerivedProductDispenseConection(_filter: String
    identifier: [token]
    patient: [reference]
    performer: [reference]
    product: [reference]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): BiologicallyDerivedProductDispenseConnection
}

type BiologicallyDerivedProductDispenseConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [BiologicallyDerivedProductDispenseEdge]
}

type BiologicallyDerivedProductDispenseEdge {
  mode: String
  score: Float
  resource: BiologicallyDerivedProductDispense
}

type BiologicallyDerivedProductDispenseCreateType {
  BiologicallyDerivedProductDispenseCreate(resource: BiologicallyDerivedProductDispenseInput): BiologicallyDerivedProductDispenseCreation
}

type BiologicallyDerivedProductDispenseCreation {
  location: String
  resource: BiologicallyDerivedProductDispense
  information: OperationOutcome
}

type BiologicallyDerivedProductDispenseUpdateType {
  BiologicallyDerivedProductDispenseUpdate(id: ID, resource: BiologicallyDerivedProductDispenseInput): BiologicallyDerivedProductDispenseUpdate
}

type BiologicallyDerivedProductDispenseUpdate {
  resource: BiologicallyDerivedProductDispense
  information: OperationOutcome
}

type BiologicallyDerivedProductDispenseDeleteType {
  BiologicallyDerivedProductDispenseDelete(id: ID): BiologicallyDerivedProductDispenseDelete
}

type BiologicallyDerivedProductDispenseDelete {
  information: OperationOutcome
}

