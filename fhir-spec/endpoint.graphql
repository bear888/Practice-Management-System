# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IEndpoint implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  connectionType: [CodeableConcept]!
  name: String  _name: ElementBase
  description: String  _description: ElementBase
  environmentType: [CodeableConcept]
  managingOrganization: Reference
  contact: [ContactPoint]
  period: Period
  availability: Availability
  payload: [EndpointPayload]
  address: url  _address: ElementBase
  header: [String]  _header: [ElementBase]
}

type Endpoint implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  connectionType: [CodeableConcept]!
  name: String  _name: ElementBase
  description: String  _description: ElementBase
  environmentType: [CodeableConcept]
  managingOrganization: Reference
  contact: [ContactPoint]
  period: Period
  availability: Availability
  payload: [EndpointPayload]
  address: url  _address: ElementBase
  header: [String]  _header: [ElementBase]
}

type EndpointPayload {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: [CodeableConcept]
  mimeType: [code]  _mimeType: [ElementBase]
  profileCanonical: [canonical]  _profileCanonical: [ElementBase]
  profileUri: [uri]  _profileUri: [ElementBase]
}

input EndpointInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  status: code  _status: ElementBaseInput
  connectionType: [CodeableConceptInput]!
  name: String  _name: ElementBaseInput
  description: String  _description: ElementBaseInput
  environmentType: [CodeableConceptInput]
  managingOrganization: ReferenceInput
  contact: [ContactPointInput]
  period: PeriodInput
  availability: AvailabilityInput
  payload: [EndpointPayloadInputInput]
  address: url  _address: ElementBaseInput
  header: [String]  _header: [ElementBaseInput]
}

input EndpointPayloadInputInput {
  id: String
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: [CodeableConceptInput]
  mimeType: [code]  _mimeType: [ElementBaseInput]
  profileCanonical: [canonical]  _profileCanonical: [ElementBaseInput]
  profileUri: [uri]  _profileUri: [ElementBaseInput]
}

type EndpointReadType {
  Endpoint(id: ID!): Endpoint
}

type EndpointListType {
  EndpointList(_filter: String
    connection_type: [token]
    identifier: [token]
    name: [String]
    organization: [reference]
    payload_type: [token]
    status: [token]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [Endpoint]
}

type EndpointConnectionType {
  EndpointConection(_filter: String
    connection_type: [token]
    identifier: [token]
    name: [String]
    organization: [reference]
    payload_type: [token]
    status: [token]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): EndpointConnection
}

type EndpointConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [EndpointEdge]
}

type EndpointEdge {
  mode: String
  score: Float
  resource: Endpoint
}

type EndpointCreateType {
  EndpointCreate(resource: EndpointInput): EndpointCreation
}

type EndpointCreation {
  location: String
  resource: Endpoint
  information: OperationOutcome
}

type EndpointUpdateType {
  EndpointUpdate(id: ID, resource: EndpointInput): EndpointUpdate
}

type EndpointUpdate {
  resource: Endpoint
  information: OperationOutcome
}

type EndpointDeleteType {
  EndpointDelete(id: ID): EndpointDelete
}

type EndpointDelete {
  information: OperationOutcome
}

