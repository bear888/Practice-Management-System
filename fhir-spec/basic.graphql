# FHIR GraphQL Schema. Version 6.0.0-ballot3

# import * from 'types.graphql'

interface IBasic implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  code: CodeableConcept!
  subject: Reference
  created: dateTime  _created: ElementBase
  author: Reference
}

type Basic implements IDomainResource & IResource & IBase {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  code: CodeableConcept!
  subject: Reference
  created: dateTime  _created: ElementBase
  author: Reference
}

input BasicInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  code: CodeableConceptInput!
  subject: ReferenceInput
  created: dateTime  _created: ElementBaseInput
  author: ReferenceInput
}

type BasicReadType {
  Basic(id: ID!): Basic
}

type BasicListType {
  BasicList(_filter: String
    author: [reference]
    code: [token]
    created: [date]
    identifier: [token]
    patient: [reference]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): [Basic]
}

type BasicConnectionType {
  BasicConection(_filter: String
    author: [reference]
    code: [token]
    created: [date]
    identifier: [token]
    patient: [reference]
    subject: [reference]
    _text: [special]
    _content: [special]
    _filter: [special]
    _has: [special]
    _id: [token]
    _in: [reference]
    _language: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _type: [special]
    _sort: String
    _count: Int
    _cursor: String): BasicConnection
}

type BasicConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [BasicEdge]
}

type BasicEdge {
  mode: String
  score: Float
  resource: Basic
}

type BasicCreateType {
  BasicCreate(resource: BasicInput): BasicCreation
}

type BasicCreation {
  location: String
  resource: Basic
  information: OperationOutcome
}

type BasicUpdateType {
  BasicUpdate(id: ID, resource: BasicInput): BasicUpdate
}

type BasicUpdate {
  resource: Basic
  information: OperationOutcome
}

type BasicDeleteType {
  BasicDelete(id: ID): BasicDelete
}

type BasicDelete {
  information: OperationOutcome
}

